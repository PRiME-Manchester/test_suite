#!/usr/bin/perl

use strict;
use warnings;

use SpiNN::Cmd;
use SpiNN::Struct;

die "usage: user_vars <ip_addr> <X> <Y>\n" unless
    $#ARGV == 2 &&
    $ARGV[1] =~ /^\d+$/ &&
    $ARGV[2] =~ /^\d+$/;

my $spin = SpiNN::Cmd->new(target => $ARGV[0]);
die unless $spin;

my $sv = SpiNN::Struct->new(scp => $spin);
die unless $sv;

print "Printing out iobufs of Cores 1-12\n";
print "---------------------------------\n\n";

for (my $x=0; $x<$ARGV[1]; $x++)
{
  for (my $y=0; $y<$ARGV[2]; $y++)
  {
   eval
    {
      my $vbase = $sv->read_var("sv.vcpu_base",  addr=>[$x,$y]);
      my $size  = $sv->read_var("sv.iobuf_size", addr=>[$x,$y]);
      my $vsize = $sv->size("vcpu");

#      printf "vbase:%u size:%d vsize:%d\n", $vbase, $size, $vsize;

      for (my $core=1; $core<=12; $core++)
      {
        printf "Chip (%2d,%2d) Core %2d\n", $x, $y, $core;
        print  "--------------------\n";

        $sv->base("vcpu", $vbase + $vsize*$core);

        my $iobuf = $sv->read_var("vcpu.iobuf", addr=>[$x,$y]);
        
        my $data = $spin->read($iobuf, $size+16, addr=>[$x,$y]);
        my ($next, $time, $ms, $string) = unpack "V3 V/a*", $data;
        print $string;


#        while ($iobuf != 0)
#        {
#          my $data = $spin->read($iobuf, $size+16, addr=>[$x,$y]);
#          my ($next, $time, $ms, $string) = unpack "V3 V/a*", $data;
#          print $string;
#        }
        print "==============================\n\n";
      }
    };

  }
}

$spin->close ();

